// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type PaperHTTPServer interface {
	CreatePaper(context.Context, *CreatePaperRequest) (*CreatePaperReply, error)

	DeletePaper(context.Context, *DeletePaperRequest) (*DeletePaperReply, error)

	GetPaper(context.Context, *GetPaperRequest) (*GetPaperReply, error)

	GetPaperCode(context.Context, *GetPaperCodeRequest) (*GetPaperCodeReply, error)

	ListPaper(context.Context, *ListPaperRequest) (*ListPaperReply, error)

	UpdatePaper(context.Context, *UpdatePaperRequest) (*UpdatePaperReply, error)
}

func RegisterPaperHTTPServer(s http1.ServiceRegistrar, srv PaperHTTPServer) {
	s.RegisterService(&_HTTP_Paper_serviceDesc, srv)
}

func _HTTP_Paper_CreatePaper_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in CreatePaperRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(PaperServer).CreatePaper(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Paper_UpdatePaper_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in UpdatePaperRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(PaperServer).UpdatePaper(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Paper_DeletePaper_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in DeletePaperRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(PaperServer).DeletePaper(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Paper_GetPaper_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in GetPaperRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(PaperServer).GetPaper(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Paper_GetPaperCode_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in GetPaperCodeRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(PaperServer).GetPaperCode(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Paper_ListPaper_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in ListPaperRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(PaperServer).ListPaper(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Paper_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.paper.v1.Paper",
	Methods: []http1.MethodDesc{

		{
			Path:    "/v1/paper",
			Method:  "POST",
			Handler: _HTTP_Paper_CreatePaper_0,
		},

		{
			Path:    "/v1/paper",
			Method:  "PUT",
			Handler: _HTTP_Paper_UpdatePaper_0,
		},

		{
			Path:    "/v1/paper/{id}",
			Method:  "DELETE",
			Handler: _HTTP_Paper_DeletePaper_0,
		},

		{
			Path:    "/v1/paper/{id}",
			Method:  "GET",
			Handler: _HTTP_Paper_GetPaper_0,
		},

		{
			Path:    "/v1/paper/{id}",
			Method:  "GET",
			Handler: _HTTP_Paper_GetPaperCode_0,
		},

		{
			Path:    "/v1/paper",
			Method:  "GET",
			Handler: _HTTP_Paper_ListPaper_0,
		},
	},
	Metadata: "api/paper/v1/paper.proto",
}
