// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaperClient is the client API for Paper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaperClient interface {
	CreatePaper(ctx context.Context, in *CreatePaperRequest, opts ...grpc.CallOption) (*CreatePaperReply, error)
	UpdatePaper(ctx context.Context, in *UpdatePaperRequest, opts ...grpc.CallOption) (*UpdatePaperReply, error)
	DeletePaper(ctx context.Context, in *DeletePaperRequest, opts ...grpc.CallOption) (*DeletePaperReply, error)
	GetPaper(ctx context.Context, in *GetPaperRequest, opts ...grpc.CallOption) (*GetPaperReply, error)
	GetPaperCode(ctx context.Context, in *GetPaperCodeRequest, opts ...grpc.CallOption) (*GetPaperCodeReply, error)
	ListPaper(ctx context.Context, in *ListPaperRequest, opts ...grpc.CallOption) (*ListPaperReply, error)
}

type paperClient struct {
	cc grpc.ClientConnInterface
}

func NewPaperClient(cc grpc.ClientConnInterface) PaperClient {
	return &paperClient{cc}
}

func (c *paperClient) CreatePaper(ctx context.Context, in *CreatePaperRequest, opts ...grpc.CallOption) (*CreatePaperReply, error) {
	out := new(CreatePaperReply)
	err := c.cc.Invoke(ctx, "/api.paper.v1.Paper/CreatePaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) UpdatePaper(ctx context.Context, in *UpdatePaperRequest, opts ...grpc.CallOption) (*UpdatePaperReply, error) {
	out := new(UpdatePaperReply)
	err := c.cc.Invoke(ctx, "/api.paper.v1.Paper/UpdatePaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) DeletePaper(ctx context.Context, in *DeletePaperRequest, opts ...grpc.CallOption) (*DeletePaperReply, error) {
	out := new(DeletePaperReply)
	err := c.cc.Invoke(ctx, "/api.paper.v1.Paper/DeletePaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) GetPaper(ctx context.Context, in *GetPaperRequest, opts ...grpc.CallOption) (*GetPaperReply, error) {
	out := new(GetPaperReply)
	err := c.cc.Invoke(ctx, "/api.paper.v1.Paper/GetPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) GetPaperCode(ctx context.Context, in *GetPaperCodeRequest, opts ...grpc.CallOption) (*GetPaperCodeReply, error) {
	out := new(GetPaperCodeReply)
	err := c.cc.Invoke(ctx, "/api.paper.v1.Paper/GetPaperCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paperClient) ListPaper(ctx context.Context, in *ListPaperRequest, opts ...grpc.CallOption) (*ListPaperReply, error) {
	out := new(ListPaperReply)
	err := c.cc.Invoke(ctx, "/api.paper.v1.Paper/ListPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaperServer is the server API for Paper service.
// All implementations must embed UnimplementedPaperServer
// for forward compatibility
type PaperServer interface {
	CreatePaper(context.Context, *CreatePaperRequest) (*CreatePaperReply, error)
	UpdatePaper(context.Context, *UpdatePaperRequest) (*UpdatePaperReply, error)
	DeletePaper(context.Context, *DeletePaperRequest) (*DeletePaperReply, error)
	GetPaper(context.Context, *GetPaperRequest) (*GetPaperReply, error)
	GetPaperCode(context.Context, *GetPaperCodeRequest) (*GetPaperCodeReply, error)
	ListPaper(context.Context, *ListPaperRequest) (*ListPaperReply, error)
	mustEmbedUnimplementedPaperServer()
}

// UnimplementedPaperServer must be embedded to have forward compatible implementations.
type UnimplementedPaperServer struct {
}

func (UnimplementedPaperServer) CreatePaper(context.Context, *CreatePaperRequest) (*CreatePaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaper not implemented")
}
func (UnimplementedPaperServer) UpdatePaper(context.Context, *UpdatePaperRequest) (*UpdatePaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaper not implemented")
}
func (UnimplementedPaperServer) DeletePaper(context.Context, *DeletePaperRequest) (*DeletePaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaper not implemented")
}
func (UnimplementedPaperServer) GetPaper(context.Context, *GetPaperRequest) (*GetPaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaper not implemented")
}
func (UnimplementedPaperServer) GetPaperCode(context.Context, *GetPaperCodeRequest) (*GetPaperCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaperCode not implemented")
}
func (UnimplementedPaperServer) ListPaper(context.Context, *ListPaperRequest) (*ListPaperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaper not implemented")
}
func (UnimplementedPaperServer) mustEmbedUnimplementedPaperServer() {}

// UnsafePaperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaperServer will
// result in compilation errors.
type UnsafePaperServer interface {
	mustEmbedUnimplementedPaperServer()
}

func RegisterPaperServer(s grpc.ServiceRegistrar, srv PaperServer) {
	s.RegisterService(&Paper_ServiceDesc, srv)
}

func _Paper_CreatePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).CreatePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.paper.v1.Paper/CreatePaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).CreatePaper(ctx, req.(*CreatePaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_UpdatePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).UpdatePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.paper.v1.Paper/UpdatePaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).UpdatePaper(ctx, req.(*UpdatePaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_DeletePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).DeletePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.paper.v1.Paper/DeletePaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).DeletePaper(ctx, req.(*DeletePaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_GetPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).GetPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.paper.v1.Paper/GetPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).GetPaper(ctx, req.(*GetPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_GetPaperCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaperCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).GetPaperCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.paper.v1.Paper/GetPaperCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).GetPaperCode(ctx, req.(*GetPaperCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paper_ListPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaperServer).ListPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.paper.v1.Paper/ListPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaperServer).ListPaper(ctx, req.(*ListPaperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Paper_ServiceDesc is the grpc.ServiceDesc for Paper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.paper.v1.Paper",
	HandlerType: (*PaperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaper",
			Handler:    _Paper_CreatePaper_Handler,
		},
		{
			MethodName: "UpdatePaper",
			Handler:    _Paper_UpdatePaper_Handler,
		},
		{
			MethodName: "DeletePaper",
			Handler:    _Paper_DeletePaper_Handler,
		},
		{
			MethodName: "GetPaper",
			Handler:    _Paper_GetPaper_Handler,
		},
		{
			MethodName: "GetPaperCode",
			Handler:    _Paper_GetPaperCode_Handler,
		},
		{
			MethodName: "ListPaper",
			Handler:    _Paper_ListPaper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/paper/v1/paper.proto",
}
