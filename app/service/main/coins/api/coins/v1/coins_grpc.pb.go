// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoinsClient is the client API for Coins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinsClient interface {
	UpdateCoins(ctx context.Context, in *UpdateCoinsRequest, opts ...grpc.CallOption) (*UpdateCoinsReply, error)
	GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsReply, error)
}

type coinsClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinsClient(cc grpc.ClientConnInterface) CoinsClient {
	return &coinsClient{cc}
}

func (c *coinsClient) UpdateCoins(ctx context.Context, in *UpdateCoinsRequest, opts ...grpc.CallOption) (*UpdateCoinsReply, error) {
	out := new(UpdateCoinsReply)
	err := c.cc.Invoke(ctx, "/api.coins.v1.Coins/UpdateCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinsClient) GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsReply, error) {
	out := new(GetCoinsReply)
	err := c.cc.Invoke(ctx, "/api.coins.v1.Coins/GetCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinsServer is the server API for Coins service.
// All implementations must embed UnimplementedCoinsServer
// for forward compatibility
type CoinsServer interface {
	UpdateCoins(context.Context, *UpdateCoinsRequest) (*UpdateCoinsReply, error)
	GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsReply, error)
	mustEmbedUnimplementedCoinsServer()
}

// UnimplementedCoinsServer must be embedded to have forward compatible implementations.
type UnimplementedCoinsServer struct {
}

func (UnimplementedCoinsServer) UpdateCoins(context.Context, *UpdateCoinsRequest) (*UpdateCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoins not implemented")
}
func (UnimplementedCoinsServer) GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoins not implemented")
}
func (UnimplementedCoinsServer) mustEmbedUnimplementedCoinsServer() {}

// UnsafeCoinsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinsServer will
// result in compilation errors.
type UnsafeCoinsServer interface {
	mustEmbedUnimplementedCoinsServer()
}

func RegisterCoinsServer(s grpc.ServiceRegistrar, srv CoinsServer) {
	s.RegisterService(&Coins_ServiceDesc, srv)
}

func _Coins_UpdateCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinsServer).UpdateCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.coins.v1.Coins/UpdateCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinsServer).UpdateCoins(ctx, req.(*UpdateCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coins_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinsServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.coins.v1.Coins/GetCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinsServer).GetCoins(ctx, req.(*GetCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coins_ServiceDesc is the grpc.ServiceDesc for Coins service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coins_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.coins.v1.Coins",
	HandlerType: (*CoinsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCoins",
			Handler:    _Coins_UpdateCoins_Handler,
		},
		{
			MethodName: "GetCoins",
			Handler:    _Coins_GetCoins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/coins/v1/coins.proto",
}
