// Code generated by protoc-gen-go-http. DO NOT EDIT.

package community

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type CommunityServiceHTTPServer interface {
	CreateCommunity(context.Context, *CreateCommunityRequest) (*CreateCommunityReply, error)

	DeleteCommunity(context.Context, *DeleteCommunityRequest) (*DeleteCommunityReply, error)

	GetCommunity(context.Context, *GetCommunityRequest) (*GetCommunityReply, error)

	ListCommunity(context.Context, *ListCommunityRequest) (*ListCommunityReply, error)

	UpdateCommunity(context.Context, *UpdateCommunityRequest) (*UpdateCommunityReply, error)
}

func RegisterCommunityServiceHTTPServer(s http1.ServiceRegistrar, srv CommunityServiceHTTPServer) {
	s.RegisterService(&_HTTP_CommunityService_serviceDesc, srv)
}

func _HTTP_CommunityService_CreateCommunity_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in CreateCommunityRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(CommunityServiceServer).CreateCommunity(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_CommunityService_UpdateCommunity_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in UpdateCommunityRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(CommunityServiceServer).UpdateCommunity(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_CommunityService_DeleteCommunity_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in DeleteCommunityRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(CommunityServiceServer).DeleteCommunity(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_CommunityService_GetCommunity_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in GetCommunityRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(CommunityServiceServer).GetCommunity(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_CommunityService_ListCommunity_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in ListCommunityRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(CommunityServiceServer).ListCommunity(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_CommunityService_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.community.CommunityService",
	Methods: []http1.MethodDesc{

		{
			Path:    "/v1/community",
			Method:  "POST",
			Handler: _HTTP_CommunityService_CreateCommunity_0,
		},

		{
			Path:    "/v1/community",
			Method:  "PUT",
			Handler: _HTTP_CommunityService_UpdateCommunity_0,
		},

		{
			Path:    "/v1/community/{id}",
			Method:  "DELETE",
			Handler: _HTTP_CommunityService_DeleteCommunity_0,
		},

		{
			Path:    "/v1/community/{id}",
			Method:  "GET",
			Handler: _HTTP_CommunityService_GetCommunity_0,
		},

		{
			Path:    "/v1/community",
			Method:  "GET",
			Handler: _HTTP_CommunityService_ListCommunity_0,
		},
	},
	Metadata: "api/community/v1/community.proto",
}
