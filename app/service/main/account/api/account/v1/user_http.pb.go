// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type UserHTTPServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)

	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserReply, error)

	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)

	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)

	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)

	VerifyPasswordByEmail(context.Context, *VerifyPasswordByEmailRequest) (*VerifyPasswordReply, error)
}

func RegisterUserHTTPServer(s http1.ServiceRegistrar, srv UserHTTPServer) {
	s.RegisterService(&_HTTP_User_serviceDesc, srv)
}

func _HTTP_User_CreateUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in CreateUserRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(UserServer).CreateUser(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_DeleteUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in DeleteUserRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(UserServer).DeleteUser(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_UpdateUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in UpdateUserRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(UserServer).UpdateUser(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_GetUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in GetUserRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	if err := http1.BindVars(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(UserServer).GetUser(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_ListUser_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in ListUserRequest

	if err := http1.BindForm(req, &in); err != nil {
		return nil, err
	}

	out, err := srv.(UserServer).ListUser(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_User_VerifyPasswordByEmail_0(srv interface{}, ctx context.Context, req *http.Request, dec func(interface{}) error) (interface{}, error) {
	var in VerifyPasswordByEmailRequest

	if err := dec(&in); err != nil {
		return nil, err
	}

	out, err := srv.(UserServer).VerifyPasswordByEmail(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_User_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.account.v1.User",
	Methods: []http1.MethodDesc{

		{
			Path:    "/v1/user",
			Method:  "POST",
			Handler: _HTTP_User_CreateUser_0,
		},

		{
			Path:    "/v1/user/{id}",
			Method:  "DELETE",
			Handler: _HTTP_User_DeleteUser_0,
		},

		{
			Path:    "/v1/user",
			Method:  "PUT",
			Handler: _HTTP_User_UpdateUser_0,
		},

		{
			Path:    "/v1/user/{id}",
			Method:  "GET",
			Handler: _HTTP_User_GetUser_0,
		},

		{
			Path:    "/v1/user",
			Method:  "GET",
			Handler: _HTTP_User_ListUser_0,
		},

		{
			Path:    "/v1/verify_user_email",
			Method:  "POST",
			Handler: _HTTP_User_VerifyPasswordByEmail_0,
		},
	},
	Metadata: "api/account/v1/user.proto",
}
